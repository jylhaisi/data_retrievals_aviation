
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # # This script loads allMETARvars from RData files and sorts the data into stationwise files according to timestamp/variable number.
> rm(list=ls())
> 
> loadRData <- function(fileName){
+   #loads an RData file into the function's own environment and returns it
+   load(fileName)
+   get(ls()[ls() != "fileName"])
+ }
> 
> # Välttämättömät asema- ja muuttujalistat yms.
> source("../point_data_analysis/load_libraries_tables_and_open_connections.R")
Loading required package: DBI
Loading required package: rJava
Loading required package: xlsxjars
Loading required package: XML
Loading required package: RCurl
Loading required package: bitops

Attaching package: ‘RCurl’

The following object is masked from ‘package:rJava’:

    clone


Attaching package: ‘reshape2’

The following objects are masked from ‘package:reshape’:

    colsplit, melt, recast


Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric


Attaching package: ‘dplyr’

The following object is masked from ‘package:reshape’:

    rename

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘tidyr’

The following object is masked from ‘package:reshape2’:

    smiths

The following objects are masked from ‘package:reshape’:

    expand, smiths

The following object is masked from ‘package:RCurl’:

    complete


Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine

Loading required package: spam
Loading required package: grid
Spam version 1.4-0 (2016-08-29) is loaded.
Type 'help( Spam)' or 'demo( spam)' for a short introduction 
and overview of this package.
Help for individual functions is also obtained by adding the
suffix '.spam' to the function name, e.g. 'help( chol.spam)'.

Attaching package: ‘spam’

The following objects are masked from ‘package:base’:

    backsolve, forwardsolve

Loading required package: fields
Loading required package: maps

Attaching package: ‘LatticeKrig’

The following objects are masked from ‘package:fields’:

    which.max.image, which.max.matrix

Loading required package: sp
Checking rgeos availability: FALSE
 	Note: when rgeos is not available, polygon geometry 	computations in maptools depend on gpclib,
 	which has a restricted licence. It is disabled by default;
 	to enable gpclib, type gpclibPermit()
General Polygon Clipper Library for R (version 1.5-5)
	Type 'class ? gpc.poly' for help
Loading required package: nlme

Attaching package: ‘nlme’

The following object is masked from ‘package:dplyr’:

    collapse

This is mgcv 1.8-15. For overview type 'help("mgcv-package")'.
Loading required package: boot

Attaching package: ‘boot’

The following object is masked from ‘package:lattice’:

    melanoma

Loading required package: CircStats
Loading required package: MASS

Attaching package: ‘MASS’

The following object is masked from ‘package:dplyr’:

    select

Loading required package: dtw
Loading required package: proxy

Attaching package: ‘proxy’

The following object is masked from ‘package:spam’:

    as.matrix

The following objects are masked from ‘package:stats’:

    as.dist, dist

The following object is masked from ‘package:base’:

    as.matrix

Loaded dtw v1.18-1. See ?dtw for help, citation("dtw") for use in publication.


Attaching package: ‘car’

The following object is masked from ‘package:boot’:

    logit

The following object is masked from ‘package:dplyr’:

    recode

Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:tidyr’:

    expand

The following object is masked from ‘package:reshape’:

    expand

Loading required package: foreach
Loaded glmnet 2.0-5


Attaching package: ‘pls’

The following object is masked from ‘package:stats’:

    loadings


Attaching package: ‘lubridate’

The following object is masked from ‘package:reshape’:

    stamp

The following object is masked from ‘package:base’:

    date

This is package "smooth", v1.9.9

Attaching package: ‘smooth’

The following object is masked from ‘package:lubridate’:

    hm

The following object is masked from ‘package:nlme’:

    getResponse

Loading required package: geosphere

Attaching package: ‘geosphere’

The following object is masked from ‘package:insol’:

    daylength


Attaching package: ‘MOSpointutils’

The following object is masked _by_ ‘.GlobalEnv’:

    loadRData

> source("hae_aviation_scripts.R")
> 
> # # THIS COMMENTED PART ONLY NEEDS TO BE RUN ONLY ONCE AS IT SAVES THE RESULTS TO FILES! THIS TAKES AWAY ALL THE NOT-NEEDED DATA FROM THE MONTHLY DATA FILES (THOSE OBSERVATIONS NOT DONE ON MINUTES 20 OR 50)
> # data_directory <- paste("/data/statcal/results/R_projects/data_retrievals_aviation/all_METARvars/")
> # data_directory_output <- paste("/data/statcal/results/R_projects/data_retrievals_aviation/all_METARvars/only_20_50_observations/")
> # # First altering result files so that they do not need to be individually altered in workspace for each station_id_no
> # for (year in 2000:2017) {
> #   for (month in 1:12) {
> #     if (month<10) {
> #       month1 <- paste("0",month,sep="")
> #     } else {
> #       month1 <- month
> #     }
> #     print(paste(year,month1))
> #     
> #     ### Loading manual METAR data ###
> #     data_file <- paste0(data_directory,"all_METARvarshavainnot_METAR_",year,"_",month1,"_8_allstations.RData")
> #     month_data1 <- loadRData(data_file)
> #     # If data is not empty, remove all observations that are not done on conventional observation times
> #     if (do.call(dim,list(x=month_data1))[1]!=0) {
> #       # Only taking into account auto-METARS even if the data should not contain anything else (message_type_id==8)
> #       month_data1 <- subset(month_data1,message_type_id==8)
> #       # Removing timestamps which are not either 20 past or 10 to (THERE IS QUITE A BIT OF THESE! THE SENSITIVITY OF THE RESULTS [ESPECIALLY DATA AVAILABILITY] TO THIS PHASE CAN BE SUBSTANTIAL!)
> #       month_data1 <- month_data1[which(format(month_data1[["obstime"]],"%M") %in% c("20","50")),]
> #     }
> #     rm(data_file)
> #     ### Loading auto METAR data ###
> #     data_file <- paste0(data_directory,"all_METARvarshavainnot_METAR_",year,"_",month1,"_1_allstations.RData")
> #     month_data2 <- loadRData(data_file)
> #     # If data is not empty, remove all observations that are not done on conventional observation times
> #     if (do.call(dim,list(x=month_data2))[1]!=0) {
> #       # Only taking into account auto-METARS even if the data should not contain anything else (message_type_id==8)
> #       month_data2 <- subset(month_data2,message_type_id==1)
> #       # Removing timestamps which are not either 20 past or 10 to (THERE IS QUITE A BIT OF THESE! THE SENSITIVITY OF THE RESULTS [ESPECIALLY DATA AVAILABILITY] TO THIS PHASE CAN BE SUBSTANTIAL!)
> #       month_data2 <- month_data2[which(format(month_data2[["obstime"]],"%M") %in% c("20","50")),]
> #     }
> #     rm(data_file)
> #     month_data <- rbind(month_data1,month_data2)
> #     rm(month_data1)
> #     rm(month_data2)
> #     if (!length(month_data)==FALSE) {
> #       month_data <- month_data[with(month_data, order(station_id, obstime, param_id, message_type_id)),]
> #     }
> #     # Saving slightly altered data
> #     save(file=paste0(data_directory_output,year,"_",month,".RData"),month_data,compress=TRUE)
> #     rm(month_data)
> #     rm(month1)
> #   }
> #   rm(month)
> # }
> # rm(year)
> # rm(data_directory)
> # rm(data_directory_output)
> 
> 
> 
> 
> data_directory <- paste("/data/statcal/results/R_projects/data_retrievals_aviation/all_METARvars/only_20_50_observations/")
> data_directory_sorted <- paste("/data/statcal/results/R_projects/data_retrievals_aviation/all_METARvars/only_20_50_observations/sorted/")
> 
> # Assigning result matrices (individually for each station, )
> all_station_ids <- (unique(all_aviation_lists[["station"]]["id"]))
> all_station_ids <- all_station_ids[order(all_station_ids$id),]
> all_time_stamps <- seq(from = as.POSIXct("2000-01-01 00:20:00 GMT", tz = "GMT"), to = with_tz(round.POSIXt(Sys.time(), "hours"), tz = "GMT"), by = "30 mins")
> all_metar_vars <- c(1,4,10,20,501,502,503,504,505,506,507,508,513,514,515,516,517,521,522,745,746,747,748,840)
> assigned_data_frame <- data.frame(matrix(NA, ncol = length(all_metar_vars)+1, nrow = length(all_time_stamps)))
> names(assigned_data_frame)[1] <- "obstime"
> names(assigned_data_frame)[2:dim(assigned_data_frame)[2]] <- paste0(all_metar_vars)
> assigned_data_frame[,1] <- all_time_stamps
> rm(all_time_stamps)
> # Going through one station at a time
> for (station_id_no in all_station_ids[217:length(all_station_ids)]) {
+   print(station_id_no)
+   assigned_station_id <- paste0("station_id_",station_id_no)
+   assign(assigned_station_id, assigned_data_frame)
+   # Data is retrieved in one month chunks, as otherwise the extent would be too much
+   for (year in 2000:2017) {
+     for (month in 1:12) {
+       if (month<10) {
+         month1 <- paste("0",month,sep="")
+       } else {
+         month1 <- month
+       }
+       # print(paste(year,month1))
+       ### Loading manual METAR data ###
+       data_file <- paste0(data_directory,year,"_",month,".RData")
+       month_data <- loadRData(data_file)
+ 
+       # If data is empty, remove loaded data vector and move onto next month
+       if (do.call(dim,list(x=month_data))[1]==0) {
+         rm(data_file)
+         rm(month_data)
+         next
+       } else {
+         # picking station-wise data separately and assigning data to variable rows/columns where it belongs to.
+         station_id_data <- filter(month_data,station_id==station_id_no)
+         for (variable in 1:length(all_metar_vars)) {
+           station_id_variable_data <- filter(station_id_data,param_id==all_metar_vars[variable])
+           # This is too complicated...
+           # eval(subs(do.call(assign,x=as.name(assigned_station_id)[[(variable+1)]][match(station_id_variable_data[["obstime"]],as.name(assigned_station_id)[["obstime"]])], value=station_id_variable_data[["value"]])))
+           com_string <- paste0(assigned_station_id,"[[(variable+1)]][match(station_id_variable_data[[\"obstime\"]],",assigned_station_id,"[[\"obstime\"]])] <- station_id_variable_data[[\"value\"]]")
+           eval(parse(text=com_string))
+           rm(com_string)
+           rm(station_id_variable_data)
+         }
+         rm(variable)
+         rm(station_id_data)
+         # print(station_id_no)
+ 
+         rm(data_file)
+         rm(month_data)
+       }
+       rm(month1)
+     }
+     rm(month)
+   }
+   rm(year)
+ 
+   save(file=paste0(data_directory_sorted,assigned_station_id,"_sorted.RData"),list=assigned_station_id,compress=TRUE)
+   rm(assigned_station_id)
+ }
[1] 218
[1] 219
[1] 220
[1] 221
[1] 222
[1] 223
[1] 224
[1] 225
[1] 226
[1] 227
[1] 228
[1] 229
[1] 230
[1] 231
[1] 232
[1] 233
[1] 234
[1] 235
[1] 236
[1] 237
[1] 238
[1] 239
[1] 240
[1] 241
[1] 242
[1] 243
[1] 244
[1] 245
[1] 246
[1] 247
[1] 248
[1] 249
[1] 250
[1] 251
[1] 252
[1] 253
[1] 254
[1] 256
[1] 257
[1] 258
[1] 259
[1] 260
[1] 261
[1] 262
[1] 263
[1] 264
[1] 265
[1] 266
[1] 267
[1] 268
[1] 269
[1] 270
[1] 271
[1] 272
[1] 273
[1] 274
[1] 275
[1] 276
[1] 277
[1] 278
[1] 279
[1] 280
[1] 281
[1] 282
[1] 283
[1] 284
[1] 285
[1] 286
[1] 287
[1] 288
[1] 289
[1] 290
[1] 291
[1] 292
[1] 293
[1] 294
[1] 295
[1] 296
[1] 297
[1] 298
[1] 299
[1] 300
[1] 301
[1] 302
[1] 303
[1] 304
[1] 305
[1] 306
[1] 307
[1] 308
[1] 309
[1] 310
[1] 311
[1] 312
[1] 313
[1] 314
[1] 315
[1] 316
[1] 317
[1] 318
[1] 319
[1] 320
[1] 321
[1] 322
[1] 323
[1] 324
[1] 325
[1] 326
[1] 327
[1] 328
[1] 329
[1] 330
[1] 331
[1] 332
[1] 333
[1] 334
[1] 335
[1] 336
[1] 337
[1] 338
[1] 339
[1] 340
[1] 341
[1] 342
[1] 343
[1] 344
[1] 345
[1] 346
[1] 347
[1] 348
[1] 349
[1] 350
[1] 351
[1] 352
[1] 353
[1] 354
[1] 355
[1] 356
[1] 357
[1] 358
[1] 359
[1] 360
[1] 361
[1] 362
[1] 363
[1] 364
[1] 365
[1] 366
[1] 367
[1] 368
[1] 369
[1] 370
[1] 371
[1] 372
[1] 373
[1] 374
[1] 375
[1] 376
[1] 377
[1] 378
[1] 379
[1] 380
[1] 381
[1] 382
[1] 383
[1] 384
[1] 385
[1] 386
[1] 387
[1] 388
[1] 389
[1] 390
[1] 391
[1] 392
[1] 393
[1] 394
[1] 395
[1] 396
[1] 397
[1] 398
[1] 399
[1] 400
> rm(station_id_no)
> 
> proc.time()
      user     system    elapsed 
 97664.793    888.722 100910.586 
